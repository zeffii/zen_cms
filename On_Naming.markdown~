## On Naming

This article will discuss the concepts to consider when deciding on names for any part of your applications. Naming conventions trickle down into all parts of your programs. Deciding on good names for your files, functions, variables and classes is critical to making your life as a programmer easier. I want to cover a few conventions that are language agnostic, then further sections will touch specific languages.

### Anarchy becomes a ghost town

No matter what language you write (English, German.. JavaScript, Python) for you to be able to communicate effectively you must follow a set of rules. In programming languages there are syntax rules which are the _language specific_ rules that must be followed for a program to work, but there are _soft-implementation_ rules that help make it easier for humans to write and communicate code.

#### Soft Rules

Soft rules aren't usually part of the formal specification of a language, but as languages gain popularity we often see certain styles emerge. Eventually Programming Styleguides are constructed among peers and institutions to document what is considered tidy and functional programming. Styles cover topics such as (but not limited to): Naming, Formatting, Order and Commenting. 

#### Name it what it is

Everything you name should still make sense to you a year from now. Other people working with your code shouldn't have to ask you why you named it something unrelated to what it does. If you need to use long names then perhaps you are not chopping the problem into small enough pieces.

#### Short names

For objects, variables, any named entity really, there are times where it's OK to use short names. For instance if you have a local variable to a loop or a have some placeholder variable in a short statement. Any time the named object won't be accessed from multiple places far away you can be more lenient on using one letter names if the language permits it.




